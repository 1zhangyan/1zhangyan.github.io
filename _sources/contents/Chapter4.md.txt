# GitHub基本操作
## 提交到本地分支
不同于传统文档开发流程中的做法，在GitHub中，对仓库的修改是一件非常重要严肃的事情，我们的每一次修改都需要被记录下来，这样我们就可以随时找到我们之前的想法，随时让仓库恢复之前的状态。在我们对代码进行修改的时候，我们并不能完全依赖软件自动帮我们记录所有的东西，那样会增加许多无聊而又烦杂的数据。所以，Git把这个自主权交给了我们。我们在完成一个阶段的工作以后，可以选择把自己认为有用的所有修改（包括你增加的内容和删除的内容）记录下来，我们把这个过程叫做提交（commit）。你当然可以每修改一次就提交一次，但是会很累。建议每次工作结束时提交，或者在进行重要的工作时频繁提交。  
  
![修改操作](../images/Modify2.png)  
  
在GitHub Desktop中，你的每次修改都被详细地显示出来。在提交之前，你需要勾选出需要提交的文件，一般来说我们会把所有的文件都选上，避免遗漏。但是这个区域存在的目的是为了告诉你，你是你作品的主宰，你决定着哪些修改会被提交。  
勾选出需要提交的文件后，在Summary的选项框中，填写本次提交的概述，最后点击Commit按钮，这样就可以把本次所有的修改提交到分支上了。  
这里我们暂时不用对分支进行什么操作，所以我们把分支放到最后解释。  
## 提交到远程分支  
我们在上一个步骤已经将自己的修改提交到了本地的main分支上了。说人话，就是我们已经把修改好的文件保存在本地了。但是远程仓库不会自动更新它的内容。就像你的百度网盘永远不会存下你没有上传的文件。所以，保证远程仓库和本地仓库一致，还需要一个步骤，推送本地分支到远程。  
  
![推送修改至远程](../images/Modify3.png)  
  
就像图里那样，当你已经进行了提交操作，右上角的红框中会自动显示Push origin，点击它，它会把本地的分支推送到远程仓库，从而保证你在GitHub网页上看到的那个仓库和你现在本地的仓库一模一样！  
## 什么是分支  
我们在上面的介绍中频繁提到了分支，那么，什么是分支呢？我们打开DeskTop左边的History选项卡。
    
![](../images/Modify4.png)  
  
可以看到History展示了从仓库创建以来到目前为止，我们对项目的所有提交。这一次次的提交就构成了我们的工作流，分支就是记录了我们工作流的一个东西。  
我们之所以之前没有对分支产生什么具体的印象，那是因为，我们每个仓库都有一个默认的分支，叫main（之前叫master）。我们的工作流都默认被记在main分支上了。但是一个仓库可以建立多个分支。  
你可能会认为，一个分支就已经足够我使用了，为什么要建立多个分支呢？当你的文档需要在不同的情况下显示不同的内容，或者你需要组团开发一个文档的时候，你就会发现分支的强大！  